{
  "welcome": "Welcome to the application",
  "greeting": "Hello, {{name}}!",
  "home": "home",
  "login": "login",
  "main-subtitle": "all aboard for your journey to CS success!",
  "learn-more": "LEARN MORE",
  "stress-free-learning": "stress-free learning",
  "stress-free-learning-contents": "learn without any pressure; through the use of gamification and its incorporation into the lessons, learn while having fun!",
  "12-concepts-to-learn": "12+ concepts to learn",
  "12-concepts-to-learn-contents": "learn anything computer science, with topics ranging from basic programming syntax to iterations and variables.",
  "no-payment-needed": "No payment needed",
  "no-payment-needed-contents": "all of the lessons on NextStop are free; you don’t need to pay to learn, you just need to read!",
  "you-did-it": "you did it!",
  "logout": "logout",

  "unit4_title": "Operators (Unit 4)",
  "unit5_title": "Conditional Statements and Loops (Unit 5)",

  "unit1_title": "Programmer’s Depot (Unit 1)",
  "unit1_lesson1_title": "1. Introduction",
  "unit1_lesson1_info": "1 minute read · 2 questions",
  "unit1_lesson1_paragraph1": "Hello! Welcome to Nextstop, an engaging new platform for learning about programming and computer science. We keep our lessons short and sweet, with an estimate of 5 minutes of reading time at max.",
  "unit1_lesson1_paragraph2": "As you start your learning with Nextstop, you will be embarking on a train journey to the city of (CITYNAME). Each station your train stops at will introduce you to a new topic, and your train will get closer to the next station every time you complete a lesson. As you progress, you’ll even earn memorable souvenirs from each station!  ",
  "unit1_lesson1_paragraph3": "In each lesson, you’ll see different interactive elements, such as true/false questions…",
  "unit1_lesson1_paragraph4": "And multiple choice questions.",
  "unit1_lesson1_paragraph5": "Besides interactive elements, there will be lots of diagrams to clarify the text.",
  "unit1_lesson1_paragraph6": "Congratulations on finishing your first lesson. We’re excited to see you on board for the rest of your journey—next stop, programming success!",
  "unit1_lesson1_question1": "QUESTION (T/F): Ada Lovelace was the first programmer in the world.",
  "unit1_lesson1_question1_option1": "True",
  "unit1_lesson1_question1_option2": "False",
  "unit1_lesson1_question1_answer": "Good job! This is what you’ll see if you get a true/false question right",
  "unit1_lesson1_question1_wrong_answer": "Not quite. The answer is true. Ada Lovelace discovered that the computer can be used beyond simple calculations! This is what you’ll see if you get a true/false question wrong.",
  "unit1_lesson1_question2": "QUESTION (A/B/C/D): How many developers are there in the world (2024)?",
  "unit1_lesson1_question2_option1": "10.4 million",
  "unit1_lesson1_question2_option2": "16.5 million",
  "unit1_lesson1_question2_option3": "28.7 million",
  "unit1_lesson1_question2_option4": "52.9 million",
  "unit1_lesson1_question2_answer": "Perfect! This is what you’ll see if you get a multiple-choice question right.",
  "unit1_lesson1_question2_wrong_answer": "Close! The answer is C. 28.7 million. As of 2024, there are 28.7 million developers, and the number is still increasing. This is what you’ll see if you get a multiple-choice question wrong.",

  "unit1_lesson2_title": "2. Definition of coding and programming",
  "unit1_lesson2_info": "3-5 min read · 3 questions",
  "unit1_lesson2_paragraph1": "What happens behind the scenes of anything digital — websites, apps, video games, and so much more? It’s all thanks to something called programming. In this lesson, you’ll learn about two recurring key terms of this station: programming and coding.",
  "unit1_lesson2_paragraph2": "First, let’s see how much you already know.",
  "unit1_lesson2_paragraph3": "It’s a common misconception that programming and coding are the same thing. They might sound similar, but they mean different things. Before we dive into the details, consider the difference between construction workers and architects.",
  "unit1_lesson2_paragraph4": "Construction workers follow a given blueprint and place the materials accordingly so that the house forms correctly. They don’t need to know if the design looks good.",
  "unit1_lesson2_paragraph5": "Architects design the blueprint according to a client's requests. They ensure the plumbing, electricity, and design all work together, and oversee the construction. If something goes wrong (such as incorrect materials being used), they may intervene directly and fix it.",
  "unit1_lesson2_paragraph6": "Now, think of the construction worker as a coder and the architect as a programmer.",
  "unit1_lesson2_paragraph7": "A coder writes code according to a thought-out solution to the problem, and their primary goal is to get the computer to perform specific tasks. For example, if the goal is to write code that finds the sum of two numbers, they tell the computer to add the two numbers, following conventions that the computer understands.",
  "unit1_lesson2_paragraph8": "A programmer, however, has a much bigger responsibility. They not only code but also process problems, design and plan solutions, test them, and fix any errors that occur. Programming is more about problem-solving and ensuring overall functionality rather than translating existing solutions into code. For example, a programmer would design the logic for a calculator application, write the code, test it, and improve its performance.",
  "unit1_lesson2_paragraph9": "In summary, you can think of coding as one instruction in the long recipe called programming. In the following lessons, you’re going to learn about the specifics of each term.",
  "unit1_lesson2_question1": "QUESTION (T/F): Programming and coding have the same meaning.",
  "unit1_lesson2_question1_option1": "True",
  "unit1_lesson2_question1_option2": "False",
  "unit1_lesson2_question1_answer": "Great job!",
  "unit1_lesson2_question1_wrong_answer": "The correct answer is false, but don’t worry. By the end of this lesson, you’ll easily be able to tell programming and coding apart.",
  "unit1_lesson2_question2": "QUESTION (A/B): Make a guess — Who do you think is the construction worker and who do you think is the architect?",
  "unit1_lesson2_question2_option1": "A. The construction workers are the coders and the architects are the programmers.",
  "unit1_lesson2_question2_option2": "B. The construction workers are the programmers and the architects are the coders.",
  "unit1_lesson2_question2_answer": "Good!",
  "unit1_lesson2_question2_wrong_answer": "Nice try! The correct answer is A. The construction workers are the coders and the architects are the programmers. Keep reading to find out why!",
  "unit1_lesson2_question3": "QUESTION (A/B): Select the correct statement.",
  "unit1_lesson2_question3_option1": "A. Programming is a part of coding.",
  "unit1_lesson2_question3_option2": "B. Coding is a part of programming.",
  "unit1_lesson2_question3_answer": "Awesome!",
  "unit1_lesson2_question3_wrong_answer": "So close! The correct answer is B. Coding is a part of programming. Coding is a step in the process of programming, just like how writing the plot is a step in the process of publishing a book.",

  "unit1_lesson3_title": "3. Coding as Part of Programming",
  "unit1_lesson3_info": "1-2 min read · 0 questions",
  "unit1_lesson3_paragraph1": "In the previous lesson, it was mentioned that coding involves instructing the computer in how to solve a problem. But how exactly does the coder tell the computer what to do?  ",
  "unit1_lesson3_paragraph2": "When a coder begins their process, they first have to choose the right language to write the code in. Just as there are different languages in the world — like English, Spanish, and Korean — there are different languages in coding. (You’ll learn more about them when you reach the next station.)",
  "unit1_lesson3_paragraph3": "After they choose a language, they begin translating the solution so that computers can understand. During this process, they have to follow the syntax, or conventions, of the language, much like the ones that humans use.",
  "unit1_lesson3_paragraph4": "Coding is just one part of a bigger idea called programming, where plans are implemented and ideas and designs are turned into actual code. In the next lesson, you’ll learn about the other parts that complete the process of programming!",

  "unit1_lesson4_title": "4. The Programmer’s Workflow",
  "unit1_lesson4_info": "2-3 min read · 2 questions",
  "unit1_lesson4_paragraph1": "In the past two lessons, programming has been emphasized as the broader concept, and you might wonder what else there is to programming if coding isn’t all of it.",
  "unit1_lesson4_paragraph2": "Programming consists of four steps: planning, coding, testing, and debugging.",
  "unit1_lesson4_paragraph3": "Now, you might be picturing the process as something like this:",
  "unit1_lesson4_paragraph4": "In reality, programming is an iterative process, meaning that there isn’t a clear end to it. There are always points for improvement, and the product must constantly be adapted. The process, therefore, can be expressed as something more like this:",
  "unit1_lesson4_paragraph5": "During the “planning” stage of programming, developers create diagrams to visualize their thought process. One way to do this is through a flow chart. In this chart, each action item is connected to each other in an array of choices, and the viewer can follow along the program’s flow by starting from the top.",
  "unit1_lesson4_paragraph6": "During the “coding” stage of programming, developers use the programming language, or type of programming, best suited for the task to simulate the process in the flow chart. This stage often requires a lot of deep thought, as here is where the developer thinks of different logic and methods of creating the program.",
  "unit1_lesson4_paragraph7": "During the “testing” stage of programming, developers have people around them, or sometimes themselves, test out the program that they wrote. This can include intentionally making the program not work properly and trying out all sorts of scenarios to ensure that there are no problems in the future after the solution is published.",
  "unit1_lesson4_paragraph8": "During the “debugging” stage of programming, developers try to fix any problems that they found in the previous stage. Finding the problems in the code, or “bugs,” often takes a long time and is tedious.",
  "unit1_lesson4_question1": "QUESTION (T/F): Programming is a linear process.",
  "unit1_lesson4_question1_option1": "True",
  "unit1_lesson4_question1_option2": "False",
  "unit1_lesson4_question1_answer": "Good job!",
  "unit1_lesson4_question1_wrong_answer": "The correct answer is false! Programming happens in four stages that constantly repeat, making it a cyclic process.",
  "unit1_lesson4_question2": "QUESTION (A/B/C/D): What is the step that often takes the longest?",
  "unit1_lesson4_question2_option1": "A. Planning",
  "unit1_lesson4_question2_option2": "B. Coding",
  "unit1_lesson4_question2_option3": "C. Testing",
  "unit1_lesson4_question2_option4": "D. Debugging",
  "unit1_lesson4_question2_answer": "Awesome!",
  "unit1_lesson4_question2_wrong_answer": "Nice try! The correct answer is D. Debugging. The bigger the project gets, the longer it takes for someone to find a problem, or bug, in it.",

  "unit2_title": "UNIT 2: Programming languages",
  "unit2_lesson1_title": "1. What are Programming Languages?",
  "unit2_lesson1_info": "3-4 min read · 1 question",
  "unit2_lesson1_paragraph1": "When a coder begins to code, they first have to choose the right language to write the code in. Just as there are different languages in the world — like English, Spanish, and Korean — there are different languages in coding.",
  "unit2_lesson1_paragraph2": "Programming is often described as giving instructions to a computer for it to follow. Before giving these instructions, however, the language must be changed into something that both the computer and the human can understand, called 'code.'",
  "unit2_lesson1_paragraph3": "Programming languages can be considered a translator between human logic and machine instructions. For example, let's take a look at how a person can write code to make the computer say something in one of the most popular programming languages, Python.",
  "unit2_lesson1_paragraph4": "As you can see, the same instruction appears with some differences from human speech. Some of the most commonly used programming languages are Python, Java, and C/C++, which will be further introduced in the latter lessons of this unit.",
  "unit2_lesson1_paragraph5": "Programming languages aren't always so similar to human speech, though Python is simply one of the rare cases in which a programming language's syntax (grammar) is so similar to a human language's. This is because Python was developed in order to make coding more approachable to younger audiences.",
  "unit2_lesson1_paragraph6": "Below are some examples of programming languages that are not as reminiscent of human language.",
  "unit2_lesson1_paragraph7": "There are more than 2,000 programming languages in the world, but most of them are used for specific purposes. For instance, the languages HTML, CSS, and JavaScript are often used together to develop websites, and the language C# is mostly used for game development.",
  "unit2_lesson1_paragraph8": "Just like in real life, you don’t need to know and memorize every single programming language. However, once you learn and master one language, you will be able to learn more languages with relative ease, as all languages are based on similar concepts.",
  "unit2_lesson1_question1": "QUESTION (A/B/C/D): Which of these languages are mainly used for game development?",
  "unit2_lesson1_question1_option1": "A. CSS",
  "unit2_lesson1_question1_option2": "B. C#",
  "unit2_lesson1_question1_option3": "C. C++",
  "unit2_lesson1_question1_option4": "D. C",
  "unit2_lesson1_question1_answer": "Good!",
  "unit2_lesson1_question1_wrong_answer": "Close! The correct answer is B. C#. The other languages are existing languages, and each of them has a different purpose.",

  "unit2_lesson2_title": "2. Language Paradigms",
  "unit2_lesson2_info": "5 min read · 3 questions",
  "unit2_lesson2_paragraph1": "A paradigm is, according to Oxford Languages, a typical example or pattern of something. Although in programming there are many different language paradigms, the three major models to be covered in this lesson are imperative programming, functional programming, and object-oriented programming.",
  "unit2_lesson2_paragraph2": "Imperative programming is a type of programming that focuses on how a program operates. Instead of relying on models that solve the problem for you, imperative programming relies on simple, small, step-by-step logic. Some of the languages that use imperative programming include C and PHP. Commonly, imperative programming is used for short scripts or general-purpose development, as it is not suitable for larger-scale applications.",
  "unit2_lesson2_paragraph3": "Object-oriented programming (OOP) is a type of programming that focuses on segmentation, which is where the name came from --- it’s oriented around blocks of code called “objects”. Some popular programming languages that use OOP include Java and Object Pascal. Often, it’s used for large-scale applications such as making mobile apps or game engines. Although this type of programming is initially complicated, it allows for easier reusability of code through OOP-specific features such as inheritance and polymorphism.",
  "unit2_lesson2_paragraph4": "Functional programming, just like its name, utilizes functions as the primary building blocks. Instead of focusing on the how, like imperative programming, it concentrates on the what. This type of programming is used in some of the more specific languages, such as Haskell and Scala. Instead of physical projects, functional programming is used in finance or science, as it is concise but better suited for managing data transformations.",
  "unit2_lesson2_paragraph5": "In this course, you will mostly be learning using Python, which is special in how it is a multi-paradigm language. ",
  "unit2_lesson2_question1": "QUESTION (A/B/C/D): How many major language paradigms will be covered in this lesson?",
  "unit2_lesson2_question1_option1": "A. 1",
  "unit2_lesson2_question1_option2": "B. 2",
  "unit2_lesson2_question1_option3": "C. 3",
  "unit2_lesson2_question1_option4": "D. 4",
  "unit2_lesson2_question1_answer": "Keep it up!",
  "unit2_lesson2_question1_wrong_answer": "It’s alright! The correct answer is C. 3.",
  "unit2_lesson2_question2": "QUESTION (A/B): What is the major difference between imperative and functional programming?",
  "unit2_lesson2_question2_option1": "A. Imperative programming focuses on the “how” of the problem, and functional programming focuses on the “what” of the problem.",
  "unit2_lesson2_question2_option2": "B. Imperative programming focuses on the “what” of the problem, and functional programming focuses on the “how” of the problem.",
  "unit2_lesson2_question2_answer": "Good job!!",
  "unit2_lesson2_question2_wrong_answer": "Confusing, right? The correct answer is A. Imperative programming focuses on the “how” of the problem, and functional programming focuses on the “what” of the problem.",

  "unit2_lesson3_title": "3. Syntax and semantics",
  "unit2_lesson3_info": "3 min read · 1 question",
  "unit2_lesson3_paragraph1": "If you’ve never studied logic or linguistics before, you’ve probably also never heard of the words “syntax” and “semantics” before. In simple terms, syntax is the “grammar” of code, and semantics is the “meaning” of code.",
  "unit2_lesson3_paragraph2": "Let’s dive deeper into each subtopic in more detail.",
  "unit2_lesson3_paragraph3": "The syntax, in programming, is the set of rules about how code must be written. Often, whatever platform you’re using to write code in (also called an IDE, or Integrated Development Environment) will remind you of the correct syntax.",
  "unit2_lesson3_paragraph4": "Let’s say that you were writing an instruction in English. You want to tell your friend to define a variable, x, and set its initial value to 1. In words, you might say, “Make a variable x and give it a value of 1.”",
  "unit2_lesson3_paragraph5": "In C++ code, you would write it as int x = 1; There, “int” sets the data type of the variable as an integer, “x” creates the name of the variable, “=” defines the variable, “1” is assigned to the variable, and “;” ends the line of code.",
  "unit2_lesson3_paragraph6": "Demonstrated above is the syntax for a simple variable definition. As you can see, once broken down, a line of code is not very different from a sentence. Semantics are the meanings of the code you wrote. A code may be syntactically correct, but if the semantics are not correct, it will have a different action than intended when it’s run. In short, syntax is the valid format of the code, and semantics is what the code actually does when it runs.",
  "unit2_lesson3_paragraph7": "Moving forward, remember that a good code has both correct syntax and correct semantics!",
  "unit2_lesson3_question1": "QUESTION (T/F): Syntax and semantics are like the alphabet and numbers of code.",
  "unit2_lesson3_question1_option1": "True",
  "unit2_lesson3_question1_option2": "False",
  "unit2_lesson3_question1_answer": "Exactly!",
  "unit2_lesson3_question1_wrong_answer": "Try again. The correct answer is True. There will be explanations below. Keep reading!",

  "unit2_lesson4_title": "Compilers vs. Interpreters",
  "unit2_lesson4_info": "2-3 min read · 1 question",
  "unit2_lesson4_paragraph1": "As you know by now, computers can’t understand human language, like English. They only understand machine languages, like the series of 0s and 1s that you’ve probably seen in movies.",
  "unit2_lesson4_paragraph2": "This sort of language is complicated and unreadable by humans. Therefore, programmers use programming languages, like C and Java, that are easier to understand by us. But because computers can’t understand this programming language, they go through a certain process that differs between compilers and interpreters.",
  "unit2_lesson4_paragraph3": "Let’s take a look at the differences between the two through an analogy.",
  "unit2_lesson4_paragraph4": "Imagine that there are two chefs, A and B. Chef A, when given a recipe for baking a cake, reads through the entire text before getting to work. They prepare all of the ingredients and materials and go through the process of baking the cake all at once. If there are mistakes in the recipe, Chef A will notice them before baking and won’t proceed until it’s fixed. Chef B, on the other hand, reads the recipe one step at a time and follows it immediately. They read the step “preheat the oven”, do it, then read “crack the egg”, do it, and so on. They don’t look ahead, and if there’s a mistake in the recipe, they might only discover it when they reach that step.",
  "unit2_lesson4_paragraph5": "Think of the compiler as Chef A and the interpreter as Chef B. The compiler language prepares and completes everything ahead of time, checking for bugs and inconsistencies before running the code. The interpreter language works step-by-step, executing each line of code as it comes. It runs the code even if there are possible mistakes, and the code stops when it reaches a bug. In the case of compilers, the code doesn’t run at all.",
  "unit2_lesson4_question1": "QUESTION (A/B): Make a guess; Which chef is the compiler?",
  "unit2_lesson4_question1_option1": "A. Chef A",
  "unit2_lesson4_question1_option2": "B. Chef B",
  "unit2_lesson4_question1_answer": "Nice job!",
  "unit2_lesson4_question1_wrong_answer": "Nice try. The correct answer is A. Chef A. Keep reading to find out why!",

  "unit2_lesson5_title": "Introduction to Python, Java, and C",
  "unit2_lesson5_info": "3 min read · 0 questions",
  "unit2_lesson5_paragraph1": "Python is a widely used programming language that was designed and developed in February 1991 by Guido van Rossum, a Dutch software engineer.",
  "unit2_lesson5_paragraph2": "Unlike other existing languages at the time, Python simplified the normally complex code into a readable syntax, reducing complexity and making it an optimal choice for novice programmers to study and use. Many syntactic difficulties are reduced, and it includes many built-in modules. To illustrate concepts in the future, NextStop will use Python code. ",
  "unit2_lesson5_paragraph3": "Due to its simplicity and applicability, it can be used for many purposes, such as web development, data analysis, machine learning, and more.",
  "unit2_lesson5_paragraph4": "Java is another widely used programming language that was designed and developed in May 1995 by Oracle Corporation and James Gosling, a Canadian computer scientist. ",
  "unit2_lesson5_paragraph5": "Java is an object-oriented programming paradigm, and is widely used in the technology industry in enterprise environments, backend development, and Android app development. It has an extensive set of built-in APIs and classes that assist any sort of concurrent programming.",
  "unit2_lesson5_paragraph6": "However, Java has a relatively complicated structure and organization, making the learning curve for it steep.",
  "unit2_lesson5_paragraph7": "C is also a widely used programming language that was designed and developed in 1972 by Dennis Ritchie, an American computer scientist.",
  "unit2_lesson5_paragraph8": "C is a low-level programming language, meaning that it provides access to the computer’s hardware and memory. It is comparatively efficient and is the foundation of many modern computer languages like Java and Python. C is mostly used for developing operating systems and has a minimal runtime.",
  "unit2_lesson5_paragraph9": "Even more so than Java, C has a steep learning curve, as its power and efficiency comes with a significant complexity that calls for many prerequisites.",

  "unit2_lesson6_title": "6. Domain-Specific Languages",
  "unit2_lesson6_info": "2 min read · 0 questions",
  "unit2_lesson6_paragraph1": "The concept of domain-specific languages (DSLs), or programming languages that exist for a specific purpose, was mentioned earlier in the lessons. Although many programming languages are adaptable and can be used for many different purposes, some languages are specialized for certain fields and functions.",
  "unit2_lesson6_paragraph2": "You can think of DSLs as college professors or secondary school subject-specific teachers, who specialize in their most skilled subject and teach it to students, and you can think of other languages as primary school homeroom teachers, who are able to teach a little bit of every subject.",
  "unit2_lesson6_paragraph3": "You’ve heard that multipurpose languages that are efficient in any purpose, such as Python, exist. Now, you might be wondering why DSLs exist. With languages that have a high domain specificity, there is an increased clarity and readability of the code, as it is developed specifically for that purpose and has existing functions to cater to the precise needs of that particular domain. There is also an improved efficiency, as these languages often eliminate the need to write boilerplate, or initializing, code.",
  "unit2_lesson6_paragraph4": "Some famous examples of DSLs are SQL, which is a language designed specifically for database data retrieval and querying, CSS, which is a language designed specifically for styling web pages, and XML, which is used specifically for data representation and exchange.",

  "unit3_lesson1_title": "1. What are Variables?",
  "unit3_lesson1_info": "2 min read · 0 questions",
  "unit3_lesson1_paragraph1": "If you’ve studied algebra before, you’re probably familiar with the term “variables.” It’s the placeholder letter that is used in math expressions because we don’t know the value of it yet. Right?",
  "unit3_lesson1_paragraph2": "Well, you’re not wrong. But in programming, variables take a slightly broader definition. Instead of being a placeholder for just numbers, variables are containers for any sort of data in a program.",
  "unit3_lesson1_paragraph3": "Hence, instead of thinking of variables as some unknown number, think of them as boxes in a storage space. By giving variables names, you can think that you’re labeling the boxes to keep track of different items.",
  "unit3_lesson1_paragraph4": "In Python, especially, a variable can be anything: a letter, a number, a truth value, and so much more. As we progress through this unit, you will learn how to define, name, use, and display variables in Python, as well as learn about the different data types.",

  "unit3_title": "Variables and Data Types (Unit 3)",
  "unit3_lesson2_title": "2. Declaration, Initialization, and Usage",
  "unit3_lesson2_info": "3 min read · 1 question",
  "unit3_lesson2_paragraph1": "In programming, the defining of a variable is called a “declaration” of the variable. To declare a variable in Python, you don’t have to indicate what value will be stored inside the variable. You just need to come up with a name for the variable.",
  "unit3_lesson2_paragraph2": "DIAGRAM: x = 5, happy = “together”, treeNum = 40",
  "unit3_lesson2_paragraph3": "To declare a variable in Python, all you have to do is write the name of the variable, an equal sign, and the value of the variable. If I were to declare a variable called “currentMonth” and set it as 5, I would write “currentMonth = 5”. If I wanted to write the name of the month instead of the value, I would write “currentMonth = May.”",
  "unit3_lesson2_paragraph4": "At this point, you may have noticed that in the names of the variables, I don’t include spaces. This is because there are variable naming conventions that should be followed, like avoiding special characters and not using reserved words, or words that exist as a built-in function like “print”.",
  "unit3_lesson2_paragraph5": "For readability, modern programmers normally use two types of name casing: camel case and snake case. Camel casing (camelCase) is where all words in the variable are stuck together with no space in between. To distinguish between words, the first letter of the words other than the first word is capitalized. Snake casing (snake_case) is where all the words in the variable are stuck together, but instead of spaces, there are underscores (“_”), and all letters are lowercase.",
  "unit3_lesson2_paragraph6": "If I wanted to declare a new variable that stores the number of days since May, I would first come up with a shortened version of the name, such as “num days since May”. Then, for camel casing, I would add the words together to make “numdayssinceMay”, and capitalize the first letter of all words except for the first word to make “numDaysSinceMay”. For snake casing, I would replace the space with underscores to make “num_days_since_May”, and make all letters lowercase to make “num_days_since_may”.",
  "unit3_lesson2_paragraph7": "As camelcase text is much faster to write, camelcasing is most frequently used in Python variable naming.",
  "unit3_lesson2_question1": "QUESTION (T/F): In the diagram above, only two variables are defined.",
  "unit3_lesson2_question1_option1": "True",
  "unit3_lesson2_question1_option2": "False",
  "unit3_lesson2_question1_answer": "Good job!",
  "unit3_lesson2_question1_wrong_answer": "Close, but not quite. The correct answer is False. In the diagram, there are three diagrams, “x”, “happy”, and “treeNum.”",

  "unit3_lesson3_title": "3. What are data types?",
  "unit3_lesson3_info": "4-5 min read · 1 question",
  "unit3_lesson3_paragraph1": "Data types, in their simplest form, are just types of data. Data, in Python, can be in any form, whether it be in numbers or words. Therefore, data types specify the kind of data it is, and is normally used to determine how the data is stored in the memory. The operations that can be performed on it changes according to the data type.",
  "unit3_lesson3_paragraph2": "In Python, there are mainly four groups of data types that you should memorize: numeric, text, boolean, and collection. Data types that do not fall into any of these categories are often custom types of special types, and do not need to be memorized.",
  "unit3_lesson3_paragraph3": "There are majorly two types of numeric data types in python, including integers and floating-point numbers. Respectively, they are referred to as “int” and “float”. Pretty straightforward, right? Integers represent any whole number, such as 4, -9528, and 482684. Floating-point numbers represent decimals, or numbers that have a “floating point”, such as 325.239, 9.5, and -2395.32582.",
  "unit3_lesson3_paragraph4": "Although there are normally two types of text data in programming, called characters and strings, they are referred to together as strings in Python. Strings are any sort of data that is a sequence of characters. If numbers are defined as being a string, they will become their text versions, and cannot be used in numerical operations. Strings in Python are always encased between two quotation marks (“hello”) or two apostrophes (‘hello’), and are not considered strings otherwise.",
  "unit3_lesson3_paragraph5": "Boolean data types represent truth values, and are always either True or False. Note that they are always capitalized in Python.",
  "unit3_lesson3_paragraph6": "Collection data types are more complicated than the previously mentioned three as they are data structures that group multiple values together. This is where data types get tricky, because some collection data types allow multiple data types to be grouped together, while others only allow for a specific syntax. Of the many collection types, the most basic ones are lists and dictionaries, represented as list and dict in Python. A list is represented by two square brackets on either side of the group, with each element separated by a comma ([1, 2, 3, 4]). Lists allow different data types to be grouped together, so a list that looks like [“hello”, 4, 9.234, “apple”, False] would not result in an error. A dictionary is represented by two curly braces on either side of the group ({“a”:10, “b”:20, “c”:30}). A dictionary will always have two values separated by a colon as pairs within it, separated by commas ({key: value}). The key is always a string and a value is typically a numerical data.",
  "unit3_lesson3_paragraph7": "Data types are important as they define what kind of operations can be performed. For instance, when two numerical values are merged, it’s called addition, and when two text values are merged, it’s called concatenation. Unless specific requirements are met, operations between different data types are impossible and will result in an error. In addition, each data type has different memory requirements, and choosing the data type efficiently can help optimize the performance of the code.",
  "unit3_lesson3_question1": "QUESTION (A/B/C/D): Given that no requirements are met, what will “5” + 3 return when run?",
  "unit3_lesson3_question1_option1": "A. 8",
  "unit3_lesson3_question1_option2": "B. 53",
  "unit3_lesson3_question1_option3": "C. \"8\"",
  "unit3_lesson3_question1_option4": "D. An error",
  "unit3_lesson3_question1_answer": "Good job!",
  "unit3_lesson3_question1_wrong_answer": "Not quite. The correct answer is D. An error. Because “5” is a string and 3 is an integer, an operation between the two without any specific requirements met will return an error.",

  "unit3_lesson4_title": "4. Type Casting",
  "unit3_lesson4_info": "3 min read · 0 questions",
  "unit3_lesson4_paragraph1": "Once a data is determined as a certain data type, it is possible to convert it to another data type. This process is called casting, and it is often used to enable operations between incompatible types of data. There are two types of type conversions, also called casting: implicit and explicit.",
  "unit3_lesson4_paragraph2": "Implicit casting is automatically performed by the language, and happens when a broader, less precise data type is converted into a more precise data type. For example, in the example below, the data type of the value being handled is initially an integer, but is later converted implicitly to a float value as a float value is added to the integer.",
  "unit3_lesson4_paragraph3": "Explicit casting is type conversion that is manually specified by the programmer. This happens using built-in type conversion functions, such as int(), float(), and str(). For example, in the example below, the data type of x is originally a string, but is explicitly converted to an integer.",
  "unit3_lesson4_paragraph4": "Although type casting is necessary for some operators to work, it sometimes results in data loss. For example, if a float data type is converted to an integer data type, the value after the decimal point is simply removed.",

  "unit4_lesson1_title": "1. What are operators?",
  "unit4_lesson1_info": "2 min read · 0 questions",
  "unit4_lesson1_paragraph1": "Operators are symbols that tell the computer how to manipulate the data on either side of the operator. You’re probably familiar with operators, since you use them all the time in math. For example, in 5 + 3, + is the operator, and 5 and 3 are the operands. Sounding familiar?",
  "unit4_lesson1_paragraph2": "In Python (and almost any other programming language), there are operators for almost anything you want to do. But since this is a unit covering only the basics, we will focus on the major three groups of operators: arithmetic, relational, and logical. Don’t worry, Python has an intuitive syntax and all lines of code can be converted into some sort of pseudo code that you can understand.",

  "unit4_lesson2_title": "2. Arithmetic and Assignment Operators",
  "unit4_lesson2_info": "3 min read · 0 questions",
  "unit4_lesson2_paragraph1": "Arithmetic operators are the operators that you are most likely to be familiar with, and are also the most commonly used operators just because they perform the most basic operations. Some commonly used arithmetic operators include addition, subtraction, multiplication, division, modulus, exponentiation, and floor division.",
  "unit4_lesson2_paragraph2": "In programming, it gets tiring having to rewrite the variable’s name over and over again for it to work. So, in Python, some of the arithmetic operations can be shortened, increasing the readability of the code and making the writing of the code more comfortable. These operators are called assignment operators, and are created by putting the operator in front of an equal sign. ",

  "unit4_lesson3_title": "3. Relational and Logical Operators",
  "unit4_lesson3_info": "3 min read · 0 questions",
  "unit4_lesson3_paragraph1": "Relational operators are also often used, especially during the establishment of conditional statements in the future. Remember how you used “greater than” and “less than”? These are the operators that you learned during primary school to compare two different numbers. Relational operators are used to compare two values and return a Boolean value of True or False.",
  "unit4_lesson3_paragraph2": "Logical operators are something that might be unfamiliar to you, but if you’ve studied or know about set theory, they should be easy to understand. Even if you aren’t, the concept and syntax in Python is intuitive, so there should be no difficulties in understanding how to use them. Logical operators are used to combine or invert Boolean values. Three of the main operators are “and”, “or”, and “not”.",

  "unit4_lesson4_title": "4. Operator Precedence and Parentheses",
  "unit4_lesson4_info": "2 min read · 1 question",
  "unit4_lesson4_paragraph1": "Just like in mathematics, there is an order of precedence in operators, which determines the order in which the operators are evaluated in an expression. The operator precedence in Python and other programming languages is similar to the PEMDAS rule of precedence in mathematics, where parentheses have the highest precedence, followed by exponents, multiplication and division, and addition and subtraction. A key difference is that in Python, this precedence also applies to non-arithmetic operations.",
  "unit4_lesson4_question1": "QUESTION (A/B): What is the value of the result? result = 3 + 5 * 2 ** 2 > 15 and not (10 - 3 < 5)",
  "unit4_lesson4_question1_option1": "A. True",
  "unit4_lesson4_question1_option2": "B. False",
  "unit4_lesson4_question1_answer": "Good job!",
  "unit4_lesson4_question1_wrong_answer": "A tough one, right? The correct answer is A. True. Make sure that you’re referring to the table if you’re confused.",

  "unit5_lesson1_title": "1. What are Conditional Statements?",
  "unit5_lesson1_info": "2 min read · 0 questions",
  "unit5_lesson1_paragraph1": "Conditional statements are statements that allow a program to make decisions and run code selectively. It’s sort of like how you ask a question in real life. They always loosely follow the logic of “if something is true, do this; otherwise, do that”, but I find it easier to understand if I think of it as “if the answer to the question is ‘yes’, do this; otherwise, do that.”",
  "unit5_lesson1_paragraph2": "The most representative way of writing a conditional statement is through if, elif, and else statements. If statements only execute the code if the condition is True, or if the answer to the question is yes. Elif (else + if) statements are a way of checking multiple conditions in sequence, happening if the condition is false but you want to add another condition, or when the answer to the question is no but you have a follow-up question. Else statements are the alternative code that happens if the condition is False, or when the answer to the question is no.",

  "unit5_lesson2_title": "2. What are Loops?",
  "unit5_lesson2_info": "1 min read · 0 questions",
  "unit5_lesson2_paragraph1": "Loops are statements that tell the computer to execute the code inside it multiple times, often a set number of times. Each loop is called an iteration. There are two major ways of making loops in Python, and they are through for loops and while loops. ",
  "unit5_lesson2_paragraph2": "For loops are loops that have a set number of iterations, and they loop over a range or sequence a certain number of times. You can think of it as looping “for” a certain range.",
  "unit5_lesson2_paragraph3": "While loops are loops that have no set number of iterations but have a condition that ends the loop. You can think of it as looping “while” the condition is True."
}
