{
  "welcome": "애플리케이션에 오신 것을 환영합니다",
  "greeting": "안녕하세요, {{name}}!",
  "home": "홈",
  "login": "로그인",
  "main-subtitle": "CS 성공으로 가는 기차가 곧 출발합니다!",
  "learn-more": "더 보기",
  "stress-free-learning": "스트레스 없는 학습",
  "stress-free-learning-contents": "lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. ",
  "12-concepts-to-learn": "12개 이상의 학습주제",
  "12-concepts-to-learn-contents": "lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. ",
  "no-payment-needed": "NO 결재!",
  "no-payment-needed-contents": "lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. ",
  "you-did-it": "해냈어요!",
  "logout": "로그아웃",

  "unit4_title": "Operators (Unit 4)",
  "unit5_title": "Conditional Statements and Loops (Unit 5)",

  "unit1_title": "Programmer’s Depot (Unit 1)",
  "unit1_lesson1_title": "1. Introduction",
  "unit1_lesson1_info": "1 minute read · 2 questions",
  "unit1_lesson1_paragraph1": "안녕하세요! 프로그래밍과 컴퓨터 과학을 배우기 위한 흥미로운 새 플랫폼, 넥스트스톱(Nextstop)에 오신 것을 환영합니다. 저희의 레슨은 최대 5분 정도의 짧은 분량으로 구성되어 있습니다.",
  "unit1_lesson1_paragraph2": "넥스트스톱과 함께 학습을 시작하면, 프로그래밍 성공으로 향하는 기차 여행을 떠나게 됩니다. 기차가 멈추는 각 역마다 새로운 주제를 배우게 되며, 레슨을 완료할 때마다 기차는 다음 역으로 한 걸음 더 가까워집니다. 학습을 거듭하다 보면, 각 역에서 기억에 남을 만한 기념품도 얻게 됩니다!",
  "unit1_lesson1_paragraph3": "각 레슨에서는 다양한 인터랙티브 요소를 만나게 될 텐데요. 예를 들어, 참/거짓 문제…",
  "unit1_lesson1_paragraph4": "그리고 객관식 문제도 있습니다.",
  "unit1_lesson1_paragraph5": "이 외에도, 내용을 더 쉽게 이해할 수 있도록 다양한 다이어그램이 포함됩니다.",
  "unit1_lesson1_paragraph6": "첫 번째 레슨을 마치신 것을 축하드립니다! 앞으로의 학습 여정에 함께하게 되어 정말 기쁩니다. 다음 역, 프로그래밍 성공을 향해 출발해 볼까요?",
  "unit1_lesson1_question1": "문제 (참/거짓): 에이다 러브레이스는 세계 최초의 프로그래머였다.",
  "unit1_lesson1_question1_option1": "참",
  "unit1_lesson1_question1_option2": "거짓",
  "unit1_lesson1_question1_answer": "잘했어요! 참/거짓 문제를 맞히면 이렇게 보이게 됩니다.",
  "unit1_lesson1_question1_wrong_answer": "아쉽네요. 정답은 참입니다. 에이다 러브레이스는 컴퓨터가 단순 계산을 넘어 다양하게 활용될 수 있음을 발견했어요! 참/거짓 문제를 틀리면 이렇게 보이게 됩니다.",
  "unit1_lesson1_question2": "문제 (A/B/C/D): 2024년에 전 세계에는 개발자가 몇 명 있을까요?",
  "unit1_lesson1_question2_option1": "A. 10.4백만",
  "unit1_lesson1_question2_option2": "B. 16.5백만",
  "unit1_lesson1_question2_option3": "C. 28.7백만",
  "unit1_lesson1_question2_option4": "D. 52.9백만",
  "unit1_lesson1_question2_answer": "완벽해요! 객관식 문제를 맞히면 이렇게 보이게 됩니다.",
  "unit1_lesson1_question2_wrong_answer": "아깝습니다! 정답은 C, 28.7백만 명입니다. 2024년 기준으로 전 세계에 28.7백만 명의 개발자가 있으며, 그 수는 계속 증가하고 있습니다. 객관식 문제를 틀리면 이렇게 보이게 됩니다.",

  "unit1_lesson2_title": "2. Definition of coding and programming",
  "unit1_lesson2_info": "3-5 min read · 3 questions",
  "unit1_lesson2_paragraph1": "디지털 세계의 모든 것 — 웹사이트, 앱, 비디오 게임 등등 — 뒤에서는 무슨 일이 일어날까요? 그 모든 것은 바로 ‘프로그래밍’ 덕분입니다. 이번 레슨에서는 이 역에서 반복적으로 등장하는 두 가지 핵심 용어, 즉 ‘프로그래밍’과 ‘코딩’에 대해 알아보겠습니다.",
  "unit1_lesson2_paragraph2": "먼저, 여러분이 이미 알고 있는 내용을 간단히 확인해볼까요?",
  "unit1_lesson2_paragraph3": "프로그래밍과 코딩이 같다고 생각하는 것은 흔한 오해입니다. 비슷해 보이지만 서로 다른 뜻을 지니고 있습니다.",
  "unit1_lesson2_paragraph4": "본격적으로 들어가기 전에, 건설 현장의 ‘노동자’와 ‘건축가’의 차이점을 떠올려 봅시다.",
  "unit1_lesson2_paragraph5": "건설 노동자는 정해진 설계도(블루프린트)에 따라 자재를 배치하여 집이 제대로 지어지도록 합니다. 설계가 보기 좋게 나왔는지는 몰라도 괜찮습니다. 반면에 건축가는 의뢰인의 요구 사항에 따라 설계도를 작성하고, 수도/전기/디자인 등의 요소가 조화를 이루도록 하며, 건설 과정을 감독합니다. 만약 잘못된 자재가 사용되는 등 문제가 발생하면 직접 개입해 문제를 해결하기도 합니다.",
  "unit1_lesson2_paragraph6": "이제 건설 노동자를 코더에, 건축가를 프로그래머에 비유해봅시다.",
  "unit1_lesson2_paragraph7": "코더는 문제에 대한 신중한 해결책을 코드로 작성하며, 주된 목표는 컴퓨터가 특정 작업을 수행하도록 하는 것입니다. 예를 들어 두 수의 합을 구하는 코드가 필요하다면, 컴퓨터가 두 수를 더하도록 명령하고, 컴퓨터가 이해할 수 있는 규칙에 따라 코드를 작성합니다.",
  "unit1_lesson2_paragraph8": "하지만 프로그래머는 훨씬 더 큰 책임을 집니다. 단순히 코드를 작성하는 것뿐 아니라, 문제를 분석하고 해결책을 디자인 및 계획하며, 테스트를 진행하고, 오류를 수정합니다. 프로그래밍은 기존의 해결책을 코드로 옮기는 것에 그치지 않고, 문제 해결과 전체 기능이 제대로 작동하는지를 보장하는 데 초점을 둡니다. 예컨대 프로그래머는 계산기 애플리케이션의 로직을 설계하고, 코드를 작성하고, 테스트하며 성능을 개선할 수 있습니다.",
  "unit1_lesson2_paragraph9": "정리하자면, 코딩은 ‘프로그래밍’이라는 긴 레시피 중 하나의 지시사항이라고 볼 수 있어요. 앞으로의 레슨에서는 각 용어의 구체적인 내용에 대해 더 자세히 배워보겠습니다.",
  "unit1_lesson2_question1": "문제 (참/거짓): 프로그래밍과 코딩은 같은 의미다.",
  "unit1_lesson2_question1_option1": "참",
  "unit1_lesson2_question1_option2": "거짓",
  "unit1_lesson2_question1_answer": "잘했어요!",
  "unit1_lesson2_question1_wrong_answer": "정답은 거짓이지만 걱정 마세요. 이 레슨을 마치면 프로그래밍과 코딩을 쉽게 구분할 수 있게 될 거예요.",
  "unit1_lesson2_question2": "문제 (A/B): 추측해보세요 — 건설 노동자는 누구일 것 같고, 건축가는 누구일 것 같나요?",
  "unit1_lesson2_question2_option1": "A. 건설 노동자는 ‘코더’, 건축가는 ‘프로그래머’",
  "unit1_lesson2_question2_option2": "건설 노동자는 ‘프로그래머’, 건축가는 ‘코더’",
  "unit1_lesson2_question2_answer": "잘했어요!",
  "unit1_lesson2_question2_wrong_answer": "아쉽네요! 정답은 A. 건설 노동자는 코더, 건축가는 프로그래머입니다. 왜 그런지 계속 읽어보세요!",
  "unit1_lesson2_question3": "문제 (A/B): 올바른 문장을 고르세요.",
  "unit1_lesson2_question3_option1": "A. 프로그래밍은 코딩의 일부이다.",
  "unit1_lesson2_question3_option2": "B. 코딩은 프로그래밍의 일부이다.",
  "unit1_lesson2_question3_answer": "멋져요!",
  "unit1_lesson2_question3_wrong_answer": "거의 맞았습니다! 정답은 B. 코딩은 프로그래밍의 일부입니다. 코딩은 프로그래밍 과정의 한 단계로, 예를 들어 책을 출판하기 위해 ‘줄거리를 쓰는 것’과 같은 역할을 합니다.",

  "unit1_lesson3_title": "3. Coding as Part of Programming",
  "unit1_lesson3_info": "1-2 min read · 0 questions",
  "unit1_lesson3_paragraph1": "이전 레슨에서 코딩이란 컴퓨터에게 문제를 어떻게 해결해야 하는지 지시하는 과정이라고 했었죠. 그렇다면 구체적으로 코더는 컴퓨터에게 무엇을 해야 할지를 어떻게 “알려줄”까요?",
  "unit1_lesson3_paragraph2": "코더가 작업을 시작하면, 제일 먼저 코드에 사용할 적절한 언어를 고릅니다. 영어, 스페인어, 한국어 등 세계에 다양한 언어가 있듯이, 코딩에도 여러 가지 언어가 존재하거든요. (다음 역에 가면 이 언어들에 대해 더 자세히 배우게 될 거예요!)",
  "unit1_lesson3_paragraph3": "언어를 선택했다면, 이제 컴퓨터가 이해할 수 있도록 해법을 ‘번역’해야 합니다. 이때, 인간이 언어를 사용할 때 문법 규칙을 지키듯, 코딩 언어도 ‘문법(syntax)’이나 ‘규칙(conventions)’을 반드시 따라야 해요.",
  "unit1_lesson3_paragraph4": "코딩은 아이디어와 설계를 실제 코드로 구현하는, ‘프로그래밍’이라는 더 큰 개념의 일부일 뿐입니다. 다음 레슨에서는 프로그래밍 과정을 완성하는 다른 요소들에 대해 알아볼 거예요!",

  "unit1_lesson4_title": "4. The Programmer’s Workflow",
  "unit1_lesson4_info": "2-3 min read · 2 questions",
  "unit1_lesson4_paragraph1": "이전 두 레슨에서, 프로그래밍은 더 넓은 개념으로 강조되어 왔습니다. 그렇다면 “코딩”이 전부가 아니라면, 프로그래밍에는 또 어떤 것들이 있을까요?",
  "unit1_lesson4_paragraph2": "프로그래밍은 크게 네 단계로 구성됩니다: 기획(Planning), 코딩(Coding), 테스트(Testing), 그리고 디버깅(Debugging).",
  "unit1_lesson4_paragraph3": "아마 아래와 같은 선형 과정을 떠올릴 수도 있겠지만…",
  "unit1_lesson4_paragraph4": "실제로 프로그래밍은 반복(iterative)되는 과정입니다. 즉, 명확한 끝이 없고, 항상 개선할 여지가 있으며 결과물은 계속해서 수정·보완됩니다. 따라서 다음과 같은 순환 구조로 표현할 수 있죠.",
  "unit1_lesson4_paragraph5": "프로그래밍의 ‘기획(Planning)’ 단계에서는 개발자가 자신의 사고 과정을 시각화하기 위해 다이어그램을 만듭니다. 이를 표현하는 한 가지 방법이 **‘순서도(flow chart)’**죠. 순서도에서는 각각의 액션 항목이 여러 선택지로 연결되고, 독자는 순서도 맨 위부터 따라 내려오면서 프로그램의 흐름을 이해할 수 있습니다.",
  "unit1_lesson4_paragraph6": "프로그래밍의 ‘코딩(Coding)’ 단계에서는, 개발자가 이 순서도를 토대로 적합한 프로그래밍 언어나 방식을 이용해 프로그램의 동작을 구현합니다. 이 단계에서는 여러 가지 로직과 방법을 구상해야 하므로, 깊은 사고가 필요한 경우가 많습니다.",
  "unit1_lesson4_paragraph7": "프로그래밍의 ‘테스트(Testing)’ 단계에서는, 개발자 본인이나 주변 사람들이 실제로 프로그램을 실행해봅니다. 이 과정에서 의도적으로 프로그램이 올바르게 작동하지 않도록 시도해 보기도 하고, 다양한 시나리오를 실험해봄으로써, 최종적으로 배포된 후에도 문제가 발생하지 않도록 확인합니다.",
  "unit1_lesson4_paragraph8": "프로그래밍의 ‘디버깅(Debugging)’ 단계에서는, 이전 단계에서 발견된 문제들을 해결하기 위해 노력합니다. 코드에서 문제(‘버그’)를 찾고 수정하는 일은 종종 많은 시간을 요하고 귀찮은 작업이 될 수 있어요.",
  "unit1_lesson4_question1": "문제 (참/거짓): 프로그래밍은 선형적인 과정이다.",
  "unit1_lesson4_question1_option1": "참",
  "unit1_lesson4_question1_option2": "거짓",
  "unit1_lesson4_question1_answer": "잘했어요!",
  "unit1_lesson4_question1_wrong_answer": "정답은 거짓입니다! 프로그래밍은 네 가지 단계를 계속해서 반복하며, 순환적인 과정을 이루어요.",
  "unit1_lesson4_question2": "문제 (A/B/C/D): 네 단계 중 가장 시간이 오래 걸리는 단계는 무엇일까요?",
  "unit1_lesson4_question2_option1": "A. 기획(Planning)",
  "unit1_lesson4_question2_option2": "B. 코딩(Coding)",
  "unit1_lesson4_question2_option3": "C. 테스팅(Testing)",
  "unit1_lesson4_question2_option4": "D. 디버깅(Debugging)",
  "unit1_lesson4_question2_answer": "멋져요!",
  "unit1_lesson4_question2_wrong_answer": "아쉽습니다! 정답은 D, 디버깅(Debugging)이에요. 프로젝트가 커질수록, 어디서 버그가 발생했는지 찾는 데에 더 많은 시간이 걸리게 된답니다.",

  "unit2_title": "UNIT 2: Programming languages",
  "unit2_lesson1_title": "1. What are Programming Languages?",
  "unit2_lesson1_info": "3-4 min read · 1 question",
  "unit2_lesson1_paragraph1": "코더가 코드를 작성하기 시작할 때는, 우선 어떤 언어를 사용할지 결정해야 합니다. 영어, 스페인어, 한국어처럼 세계에 다양한 언어가 있듯이, 코딩에도 여러 언어가 존재합니다.",
  "unit2_lesson1_paragraph2": "일반적으로 프로그래밍은 컴퓨터에게 지시 사항을 내리는 것이라고 표현합니다. 하지만 이 지시 사항을 전달하기 전에는, 인간과 컴퓨터 모두 이해할 수 있는 형태인 “코드(code)”로 바꿔야 하죠.",
  "unit2_lesson1_paragraph3": "프로그래밍 언어는 인간의 논리와 기계의 명령을 연결해주는 “번역가” 역할을 한다고 볼 수 있습니다. 예를 들어, 가장 널리 쓰이는 프로그래밍 언어 중 하나인 파이썬(Python)에서 컴퓨터가 어떤 말을 하도록 만들려면 어떻게 코드를 작성해야 하는지 살펴볼까요?",
  "unit2_lesson1_paragraph4": "보시다시피, 같은 지시 사항이 인간이 말하는 문장과는 조금 다르게 표현되고 있습니다. 자주 쓰이는 대표적인 프로그래밍 언어로는 파이썬, 자바, 그리고 C/C++ 등이 있는데, 이 단원 후반부에서 좀 더 자세히 배울 예정이에요.",
  "unit2_lesson1_paragraph5": "모든 프로그래밍 언어가 인간의 언어와 이렇게 비슷한 것은 아닙니다. 다만 파이썬은 문법(문장 구조)이 인간의 언어와 상당히 흡사한 몇 안 되는 예시 중 하나일 뿐이에요. 파이썬이 젊은 층이나 초심자들에게 코딩을 좀 더 친근하게 만들기 위해 개발되었기 때문이죠.",
  "unit2_lesson1_paragraph6": "아래에는 인간의 언어와는 조금 더 거리가 있는 프로그래밍 언어들의 예시가 있습니다.",
  "unit2_lesson1_paragraph7": "세상에는 2,000개가 넘는 프로그래밍 언어가 있지만, 대부분은 특정 용도에 특화되어 있습니다. 예를 들어, HTML, CSS, JavaScript는 웹사이트 개발 시 함께 자주 쓰이고, C#은 주로 게임 개발에 사용됩니다.",
  "unit2_lesson1_paragraph8": "현실 세계에서도 모든 언어를 다 외울 필요는 없듯, 모든 프로그래밍 언어를 다 알 필요는 없습니다. 하지만 한 언어를 제대로 익히면, 비슷한 개념들이 바탕이 되기 때문에 다른 언어도 훨씬 수월하게 배울 수 있게 돼요.",
  "unit2_lesson1_question1": "문제 (A/B/C/D): 이 중 게임 개발에 주로 쓰이는 언어는 무엇일까요?",
  "unit2_lesson1_question1_option1": "A. CSS",
  "unit2_lesson1_question1_option2": "B. C#",
  "unit2_lesson1_question1_option3": "C. C++",
  "unit2_lesson1_question1_option4": "D. C",
  "unit2_lesson1_question1_answer": "좋아요!",
  "unit2_lesson1_question1_wrong_answer": "아깝습니다! 정답은 **B, C#**이에요. 나머지 언어들도 모두 존재하는 언어이지만, 각각 쓰임새가 조금씩 다릅니다.",

  "unit2_lesson2_title": "2. Language Paradigms",
  "unit2_lesson2_info": "5 min read · 3 questions",
  "unit2_lesson2_paragraph1": "‘패러다임(paradigm)’이란, 옥스포드 사전에 따르면 특정 사물의 전형적인 예시나 패턴을 의미합니다. 프로그래밍 세계에는 여러 가지 언어 패러다임이 있지만, 이번 레슨에서는 명령형 프로그래밍(Imperative Programming), 함수형 프로그래밍(Functional Programming), 그리고 객체지향 프로그래밍(Object-Oriented Programming), 이렇게 세 가지 주요 모델에 대해 다룹니다.",
  "unit2_lesson2_paragraph2": "명령형 프로그래밍은 프로그램이 어떻게(how) 동작하는지에 초점을 맞추는 방식입니다. 미리 문제를 해결해주는 모델에 의존하기보다는, 간단하고 작은 단계적 로직을 차근차근 쌓아나가는 게 특징이죠. 명령형 프로그래밍을 사용하는 언어로는 C와 PHP 등이 있습니다. 보통 짧은 스크립트나 범용 개발에 자주 쓰이며, 대규모 애플리케이션에는 적합하지 않은 편입니다.",
  "unit2_lesson2_paragraph3": "객체지향 프로그래밍은 분할(세분화)에 초점을 맞추는 프로그래밍 방식이며, 여기서 이름의 유래가 왔습니다. 즉, ‘객체(objects)’라는 코드 블록들을 중심으로 프로그램이 구성되지요. 객체지향 프로그래밍 언어로는 자바(Java), 오브젝트 파스칼(Object Pascal) 등이 잘 알려져 있습니다. 주로 모바일 앱이나 게임 엔진처럼 대규모 애플리케이션을 만들 때 활용됩니다. 초반에는 복잡해 보이지만, 상속(inheritance)과 다형성(polymorphism) 같은 OOP 고유 기능 덕분에 코드 재사용성이 높아지는 장점이 있습니다.",
  "unit2_lesson2_paragraph4": "이름에서 알 수 있듯, 함수형 프로그래밍은 함수를 주된 구성 블록으로 삼습니다. 명령형 프로그래밍처럼 어떻게(how) 에 집중하기보다는, 무엇을(what) 하는지에 집중하죠. 대표적으로 하스켈(Haskell)이나 스칼라(Scala)처럼 특정 목적을 위해 설계된 언어들이 함수형 프로그래밍을 사용합니다. 물리적 프로젝트보다는 금융이나 과학 분야에서 주로 활용되는데, 데이터 변환을 효율적으로 처리할 수 있도록 간결하게 작성할 수 있기 때문입니다.",
  "unit2_lesson2_paragraph5": "이 과정에서는 대부분 파이썬(Python) 을 사용해 학습하게 되는데, 파이썬은 여러 패러다임을 동시에 지원하는 ‘멀티 패러다임’ 언어라는 점에서 특별합니다.",
  "unit2_lesson2_question1": "문제 (A/B/C/D): 이번 레슨에서 다룰 주요 언어 패러다임은 몇 가지일까요?",
  "unit2_lesson2_question1_option1": "A. 1",
  "unit2_lesson2_question1_option2": "B. 2",
  "unit2_lesson2_question1_option3": "C. 3",
  "unit2_lesson2_question1_option4": "D. 4",
  "unit2_lesson2_question1_answer": "계속 열심히 해보세요!",
  "unit2_lesson2_question1_wrong_answer": "괜찮아요! 정답은 C, 3가지입니다.",
  "unit2_lesson2_question2": "문제 (A/B): 명령형 프로그래밍과 함수형 프로그래밍의 가장 큰 차이는 무엇일까요?",
  "unit2_lesson2_question2_option1": "A. 명령형 프로그래밍은 문제의 “어떻게(how)” 에 초점을 맞추고, 함수형 프로그래밍은 문제의 “무엇(what)” 에 초점을 맞춘다.",
  "unit2_lesson2_question2_option2": "B. 명령형 프로그래밍은 문제의 “무엇(what)” 에 초점을 맞추고, 함수형 프로그래밍은 문제의 “어떻게(how)” 에 초점을 맞춘다.",
  "unit2_lesson2_question2_answer": "잘했어요!!",
  "unit2_lesson2_question2_wrong_answer": "헷갈리죠? 정답은 A입니다. 명령형 프로그래밍은 문제의 어떻게 에 집중하고, 함수형 프로그래밍은 문제의 무엇 에 집중합니다.",

  "unit2_lesson3_title": "3. Syntax and semantics",
  "unit2_lesson3_info": "3 min read · 1 question",
  "unit2_lesson3_paragraph1": "논리학이나 언어학을 공부해본 적이 없다면, “문법(syntax)”과 “의미(semantics)”라는 단어를 들어본 적이 없을 수도 있습니다. 간단히 말하자면, 문법(Syntax) 은 코드의 “문장 구조”, 의미(Semantics) 는 코드의 “의도된 의미”라고 볼 수 있습니다.",
  "unit2_lesson3_paragraph2": "지금부터 각각의 주제를 더 자세히 살펴봅시다.",
  "unit2_lesson3_paragraph3": "프로그래밍에서 문법(Syntax) 은 코드를 작성해야 하는 규칙의 집합을 말합니다. 보통 코드 작성에 사용하는 플랫폼(통합 개발 환경, IDE라고도 함)은 올바른 문법을 지킬 수 있도록 도와주죠.",
  "unit2_lesson3_paragraph4": "예를 들어, 친구에게 “변수 x를 만들어서, 그 값을 1로 설정해줘”라고 영어로 지시한다고 해봅시다. 이를 C++ 코드로 바꾸면 int x = 1;처럼 작성됩니다. 이제 이 코드를 다이어그램으로 나눠서 살펴볼까요?",
  "unit2_lesson3_paragraph5": "C++ 코드에서는 다음과 같이 작성합니다: int x = 1; 여기서 int는 변수를 정수형으로 선언하고, x는 변수의 이름을 정의하며, =는 변수를 정의하고, 1은 그 변수에 할당되는 값이며, ;는 해당 코드 줄의 끝을 의미합니다.",
  "unit2_lesson3_paragraph6": "이제 의미(Semantics) 에 대해 알아봅시다. 의미는 우리가 작성한 코드가 실제로 어떤 역할을 하는지를 말합니다. 코드가 문법적으로는 맞더라도, 의미가 적절하지 않으면 실행 시 의도와는 전혀 다른 동작을 할 수도 있어요. 결국 정리하자면, 문법은 코드가 ‘유효한 형식’으로 작성되었는지를 뜻하고, 의미는 그 코드가 실행될 때 ‘실제로 무엇을 하는지’를 가리킵니다.",
  "unit2_lesson3_paragraph7": "앞으로도 기억하세요. 좋은 코드란, 올바른 문법과 올바른 의미를 모두 갖춘 코드라는 점을요!",
  "unit2_lesson3_question1": "질문 (참/거짓): 문법과 의미는 코드의 알파벳과 숫자 같은 것이다.",
  "unit2_lesson3_question1_option1": "참",
  "unit2_lesson3_question1_option2": "거짓",
  "unit2_lesson3_question1_answer": "딩동댕!",
  "unit2_lesson3_question1_wrong_answer": "다시 해볼까요? 정답은 참입니다. 아래에 설명이 나올 예정이니 계속 읽어보세요!",

  "unit2_lesson4_title": "Compilers vs. Interpreters",
  "unit2_lesson4_info": "2-3 min read · 1 question",
  "unit2_lesson4_paragraph1": "이미 알고 있듯이, 컴퓨터는 인간의 언어(예: 영어)를 이해할 수 없습니다. 컴퓨터가 이해하는 것은 영화에서 자주 봤을 0과 1로 이루어진 기계어뿐이죠.",
  "unit2_lesson4_paragraph2": "이런 기계어는 인간에게는 복잡하고 알아보기 어렵기 때문에, 프로그래머들은 C나 Java 같은 프로그래밍 언어를 사용합니다. 하지만 컴퓨터는 이 프로그래밍 언어조차 바로 이해할 수 없으므로, 컴파일러와 인터프리터라는 서로 다른 과정 중 하나를 거쳐야 합니다.",
  "unit2_lesson4_paragraph3": "두 방식을 비교하기 위해 간단한 비유를 들어볼게요.",
  "unit2_lesson4_paragraph4": "가령 두 명의 요리사, A와 B가 있다고 해봅시다. 케이크를 구워야 하는 레시피가 주어지면, 요리사 A는 레시피의 내용을 모두 먼저 읽고 난 후에 재료를 준비하고 한 번에 케이크를 구워냅니다. 만약 레시피에 오류가 있다면, 굽기 전에 문제를 발견하고 수정될 때까지 진행하지 않죠. 반면 요리사 B는 레시피를 한 단계씩 읽고 그때그때 실행합니다. 예를 들어 “오븐 예열하기” 단계를 읽고 바로 실행한 뒤, 다음 단계인 “계란 깨기”를 보고 또 실행하는 식이죠. 레시피를 미리 훑어보지 않으므로, 혹시 레시피에 문제가 있다면 해당 단계에 도달했을 때 비로소 그 오류를 알게 될 수도 있습니다.",
  "unit2_lesson4_paragraph5": "컴파일러는 마치 요리사 A처럼 작동합니다. 즉, 프로그램 실행 전에 모든 것을 미리 준비하고, 코드에 버그나 불일치가 없는지 확인한 뒤에 실행하는 거죠. 한편 인터프리터는 요리사 B처럼, 코드를 한 줄씩 읽으며 실행합니다. 실행 도중에 문제가 있어도 우선 실행을 진행하다가, 버그가 나타나는 시점에서 코드를 멈춥니다. 컴파일러의 경우, 코드 전체가 문제가 없다고 확인되어야 비로소 실행되는 것이 큰 차이점이에요.",
  "unit2_lesson4_question1": "문제 (A/B): 추측해보세요. 컴파일러는 누구일까요?",
  "unit2_lesson4_question1_option1": "A. 요리사 A",
  "unit2_lesson4_question1_option2": "B. 요리사 B",
  "unit2_lesson4_question1_answer": "잘했어요!",
  "unit2_lesson4_question1_wrong_answer": "정답은 A, 요리사 A입니다. 왜 그런지 더 알아볼까요?",

  "unit2_lesson5_title": "Introduction to Python, Java, and C",
  "unit2_lesson5_info": "3 min read · 0 questions",
  "unit2_lesson5_paragraph1": "파이썬(Python) 은 네덜란드 출신 소프트웨어 엔지니어 귀도 반 로섬(Guido van Rossum)이 1991년 2월에 설계·개발한, 광범위하게 쓰이는 프로그래밍 언어입니다",
  "unit2_lesson5_paragraph2": "기존 언어들이 복잡한 코드를 작성해야 했던 당시와 달리, 파이썬은 복잡도를 낮추고 가독성을 높이는 문법을 채택해 초심자들이 배우고 사용하기 좋은 언어로 자리매김했습니다. 문법적 난이도를 크게 완화했고, 다양한 내장 모듈도 포함하고 있죠. 앞으로 넥스트스톱의 예시 설명에도 주로 파이썬 코드를 활용할 예정입니다.",
  "unit2_lesson5_paragraph3": "파이썬은 단순성과 높은 적용 가능성 덕분에 웹 개발, 데이터 분석, 머신 러닝 등 다양한 목적에 폭넓게 활용될 수 있습니다.",
  "unit2_lesson5_paragraph4": "자바(Java) 또한 널리 쓰이는 프로그래밍 언어로, 1995년 5월에 오라클(Oracle)과 캐나다 출신 컴퓨터 과학자 제임스 고슬링(James Gosling)에 의해 설계·개발되었습니다.",
  "unit2_lesson5_paragraph5": "J자바는 객체지향 프로그래밍 패러다임에 기반을 두며, 기업 환경이나 백엔드 개발, 안드로이드 앱 개발 등 기술 산업 전반에서 활발히 사용됩니다. 동시성 프로그래밍을 돕는 광범위한 API와 클래스들을 갖추고 있죠.",
  "unit2_lesson5_paragraph6": "하지만 자바는 구조와 체계가 비교적 복잡하여, 학습 난이도가 높은 편입니다.",
  "unit2_lesson5_paragraph7": "C 언어는 미국인 컴퓨터 과학자 데니스 리치(Dennis Ritchie)가 1972년에 설계·개발한, 역시 널리 사용되는 프로그래밍 언어입니다.",
  "unit2_lesson5_paragraph8": "C는 하드웨어와 메모리에 직접 접근할 수 있는 저수준(low-level) 언어로 분류됩니다. 상대적으로 효율적이며, 자바나 파이썬 같은 현대 프로그래밍 언어들의 토대를 이루고 있죠. 주로 운영 체제 개발에 쓰이며, 런타임이 매우 적은 편입니다.",
  "unit2_lesson5_paragraph9": "자바보다도 학습 난이도가 더 높은 편인데, 강력하고 효율적인 성능만큼 요구되는 지식의 폭과 복잡도가 크기 때문입니다.",

  "unit2_lesson6_title": "6. Domain-Specific Languages",
  "unit2_lesson6_info": "2 min read · 0 questions",
  "unit2_lesson6_paragraph1": "앞서 레슨에서 잠깐 언급했듯이, 도메인 특화 언어(DSLs)란 특정 목적을 위해 만들어진 프로그래밍 언어를 말합니다. 많은 프로그래밍 언어가 다양한 용도로 사용될 수 있도록 유연하게 만들어졌지만, 그중에는 특정 분야나 기능에 특화된 언어들도 있습니다.",
  "unit2_lesson6_paragraph2": "DSL을 대학교 교수나 중·고등학교 과목 전문 교사에 비유해볼 수 있습니다. 이들은 자신이 가장 전문성을 갖춘 과목을 집중적으로 가르치죠. 반면, 다목적 언어는 초등학교 담임 선생님처럼 모든 과목을 조금씩 가르치는 역할을 맡는다고 볼 수 있습니다.",
  "unit2_lesson6_paragraph3": "파이썬처럼 어떤 목적에도 효율적으로 쓰일 수 있는 다목적 언어가 있는데, 그렇다면 왜 DSL이 필요한 걸까요? 높은 도메인 특수성을 가진 언어는 해당 영역의 요구에 특화되어 있기 때문에, 코드의 가독성과 명확성이 크게 향상됩니다. 또한 해당 도메인에서 자주 쓰이는 기능과 함수를 미리 갖추고 있어, 보일러플레이트(초기화) 코드를 작성할 필요가 줄어들어 효율이 높아집니다.",
  "unit2_lesson6_paragraph4": "대표적인 DSL로는 SQL이 있는데, 이는 데이터베이스에서 정보를 조회하고 관리하기 위해 설계된 언어입니다. CSS는 웹페이지의 스타일을 지정하기 위해 만들어졌으며, XML은 데이터 표현 및 교환에 특화된 언어입니다.",

  "unit3_title": "Variables and Data Types (Unit 3)",
  "unit3_lesson1_title": "1. What are Variables?",
  "unit3_lesson1_info": "2 min read · 0 questions",
  "unit3_lesson1_paragraph1": "만약 대수(알제브라)를 배워본 적이 있다면, “변수(variable)”라는 용어가 낯설지 않을 것입니다. 수학 표현식에서 값이 정해지지 않은 상태를 나타내는 기호(예: x)를 말하죠, 맞나요??",
  "unit3_lesson1_paragraph2": "그 말이 틀린 건 아니지만, 프로그래밍에서 변수는 조금 더 넓은 의미를 갖습니다. 수만을 대신하는 자리표시가 아니라, 프로그램 안에서 어떠한 종류의 데이터든 담을 수 있는 ‘컨테이너’ 역할을 하기 때문입니다.",
  "unit3_lesson1_paragraph3": "따라서 변수를 “어떤 값을 알 수 없는 숫자”로만 생각하기보다는, 창고에 놓인 여러 박스라고 생각해볼 수 있어요. 박스마다 이름(라벨)을 붙여서, 각각 어떤 데이터를 담고 있는지 구분하는 셈입니다.",
  "unit3_lesson1_paragraph4": "특히 파이썬에서는, 문자나 숫자, 논리값(true/false) 등 어떤 타입의 데이터도 변수에 담을 수 있습니다. 이번 단원을 통해, 파이썬에서 변수를 정의하고, 이름 붙이고, 출력하는 방법을 익히게 될 거예요. 또한 여러 가지 데이터 타입에 대해서도 배울 예정입니다.",

  "unit3_lesson2_title": "2. Declaration, Initialization, and Usage",
  "unit3_lesson2_info": "3 min read · 1 question",
  "unit3_lesson2_paragraph1": "프로그래밍에서 변수를 정의하는 과정을 가리켜 변수의 “선언(declaration)”이라고 부릅니다. 파이썬에서 변수를 선언할 때는, 변수에 어떤 값이 들어갈지 미리 밝힐 필요가 없습니다. 그저 변수를 가리킬 이름만 정해주면 돼요.",
  "unit3_lesson2_paragraph2": "DIAGRAM: x = 5, happy = “together”, treeNum = 40",
  "unit3_lesson2_paragraph3": "파이썬에서 변수를 선언하려면, 그냥 변수 이름, 등호(=), 그리고 값을 적으면 됩니다. 예컨대 “currentMonth”라는 변수를 만들고 그 값을 5로 설정하고 싶다면, currentMonth = 5라고 쓰면 되죠. 변수에 실제 단어를 넣고 싶다면, currentMonth = “May”와 같이 작성할 수도 있습니다.",
  "unit3_lesson2_paragraph4": "아마 눈치채셨겠지만, 변수 이름을 지을 때는 공백을 포함하지 않습니다. 이는 변수를 지을 때 지켜야 하는 여러 규칙(특수문자 금지, 예약어 금지 등) 중 하나예요. 또한 print처럼 이미 함수 이름으로 존재하는 단어도 피해야 합니다.",
  "unit3_lesson2_paragraph5": "가독성을 위해, 요즘 프로그래머들은 주로 두 가지 이름 표기법을 사용합니다: 카멜 케이스(camelCase) 와 스네이크 케이스(snake_case). camelCase: 모든 단어를 띄어쓰기 없이 이어 붙이고, 첫 단어의 첫 글자를 제외한 나머지 단어들의 첫 글자를 대문자로 씁니다. snake_case: 모든 단어 사이에 밑줄(_)을 넣고, 전부 소문자로 씁니다.",
  "unit3_lesson2_paragraph6": "예를 들어 “5월 이후로 지난 일수”를 저장하는 변수를 새로 만들고 싶다고 해봅시다. 약칭으로 “num days since May”라는 이름을 떠올렸다면, 카멜 케이스로는 numDayssinceMay 정도가 되고, 첫 단어를 제외한 나머지 단어들의 첫 글자만 대문자로 바꿔 numDaysSinceMay로 쓸 수 있습니다. 스네이크 케이스로는 모든 단어를 소문자로 만들고, 공백 대신 밑줄을 넣어 num_days_since_may로 표현할 수 있죠. 카멜 케이스 방식은 빠르게 입력할 수 있기 때문에, 파이썬에서 변수 이름을 지을 때 주로 쓰이는 표기법입니다.",
  "unit3_lesson2_paragraph7": "앞으로 변수를 사용할 때는 이름 표기법과 같은 관례를 잘 지키며, 다른 사람들이 보더라도 직관적으로 이해하기 쉬운 코드를 작성하는 습관을 들이는 것이 좋습니다!",
  "unit3_lesson2_question1": "문제 (참/거짓): 위 다이어그램에서 정의된 변수는 딱 두 개뿐이다.",
  "unit3_lesson2_question1_option1": "True",
  "unit3_lesson2_question1_option2": "False",
  "unit3_lesson2_question1_answer": "Good job!",
  "unit3_lesson2_question1_wrong_answer": "아깝네요! 정답은 거짓입니다. 다이어그램에는 총 세 개의 변수, 즉 “x”, “happy”, 그리고 “treeNum”이 있습니다.",

  "unit3_lesson3_title": "3. What are data types?",
  "unit3_lesson3_info": "4-5 min read · 1 question",
  "unit3_lesson3_paragraph1": "가장 단순한 형태에서 데이터 타입은 그저 ‘데이터의 종류’를 의미합니다. 파이썬에서 데이터는 숫자나 단어 등 어떤 형태든 가능하기 때문에, 데이터 타입은 그 데이터가 어떤 종류인지 지정하고, 보통 메모리에 어떻게 저장될지를 결정하는 데 사용됩니다. 또한, 어떤 연산을 수행할 수 있는지도 데이터 타입에 따라 달라집니다.",
  "unit3_lesson3_paragraph2": "파이썬에서는 반드시 기억해야 할 네 가지 주요 데이터 타입 그룹이 있습니다: 숫자(numeric), 텍스트(text), 불리언(boolean), 컬렉션(collection). 이 네 가지 범주에 속하지 않는 데이터 타입은 종종 특별한 용도의 커스텀 타입이며, 외울 필요는 없습니다.",
  "unit3_lesson3_paragraph3": "파이썬의 숫자(numeric) 데이터 타입에는 주로 정수(integer)와 실수(floating-point)가 있습니다. 각각 “int”와 “float”라고 부르죠. 간단합니다, 그렇죠? 정수는 4, -9528, 482684 같은 소수점 없는 모든 정수를 나타내고, 실수는 325.239, 9.5, -2395.32582처럼 소수점이 있는 숫자를 의미합니다(“floating point”).",
  "unit3_lesson3_paragraph4": "프로그래밍에서 텍스트 데이터는 일반적으로 문자(character)와 문자열(string) 두 종류가 있지만, 파이썬에서는 둘 다 문자열(string)로 취급합니다. 문자열은 문자들의 연속인 모든 데이터 형태를 말합니다. 숫자를 문자열로 정의하면 그 숫자는 텍스트 버전이 되어, 수치 연산에 사용할 수 없습니다. 파이썬에서 문자열은 항상 큰따옴표(“hello”) 또는 작은따옴표('hello') 사이에 있어야 하며, 그렇지 않으면 문자열로 간주되지 않습니다.",
  "unit3_lesson3_paragraph5": "불리언(boolean) 데이터 타입은 진리값을 나타내며, 항상 True 또는 False 중 하나여야 합니다. 파이썬에서는 이 두 값이 항상 대문자로 시작한다는 점에 주의하세요.",
  "unit3_lesson3_paragraph6": "컬렉션(collection) 데이터 타입은 앞서 언급한 세 가지보다 더 복잡합니다. 여러 값을 한데 묶는 자료구조이기 때문이죠. 이 부분이 까다로운 이유는, 어떤 컬렉션 타입은 서로 다른 데이터 타입을 함께 묶을 수 있지만, 어떤 것은 특정 문법만 허용하기도 하기 때문입니다. 가장 기본적인 컬렉션 타입으로는 리스트(list)와 딕셔너리(dict)가 있습니다. 리스트는 그룹 양쪽을 대괄호([])로 감싸고, 요소들을 쉼표로 구분합니다. 예: [1, 2, 3, 4]. 리스트에는 서로 다른 타입의 요소를 섞어도 오류가 발생하지 않습니다. 예: [“hello”, 4, 9.234, “apple”, False]. 딕셔너리는 그룹 양쪽을 중괄호({})로 감싸고, 콜론(:)으로 구분된 키: 값 쌍들을 쉼표로 구분해 나열합니다. 예: {“a”:10, “b”:20, “c”:30}. 이때 키는 보통 문자열이고, 값은 일반적으로 숫자 같은 다른 데이터일 수 있습니다.",
  "unit3_lesson3_paragraph7": "데이터 타입이 중요한 이유는 어떤 연산을 수행할 수 있는지 결정하기 때문입니다. 예를 들어 숫자 두 개를 합치면 ‘덧셈(addition)’이 되지만, 문자열 두 개를 합치면 ‘문자 연결(concatenation)’이 됩니다. 특정 조건이 충족되지 않으면 다른 타입끼리 연산을 시도했을 때 오류가 발생할 수 있습니다. 또한 각 데이터 타입은 서로 다른 메모리 요구 사항을 가지므로, 적절한 타입을 선택하면 코드 성능을 최적화하는 데 도움이 됩니다.",
  "unit3_lesson3_question1": "질문 (A/B/C/D): 아무런 추가 조건이 없을 때, “5” + 3을 실행하면 결과는 무엇일까요?",
  "unit3_lesson3_question1_option1": "A. 8",
  "unit3_lesson3_question1_option2": "B. 53",
  "unit3_lesson3_question1_option3": "C. \"8\"",
  "unit3_lesson3_question1_option4": "D. 에러",
  "unit3_lesson3_question1_answer": "잘했어요!!",
  "unit3_lesson3_question1_wrong_answer": "아쉽지만 정답은 D. 에러입니다. “5”는 문자열이고 3은 정수이므로, 두 값을 아무런 조건 없이 더하려고 하면 에러가 발생합니다.",

  "unit3_lesson4_title": "4. Type Casting",
  "unit3_lesson4_info": "3 min read · 0 questions",
  "unit3_lesson4_paragraph1": "데이터가 특정 데이터 타입으로 결정된 후, 다른 데이터 타입으로 변환하는 것이 가능합니다. 이 과정을 캐스팅(casting) 이라고 하며, 보통 서로 호환되지 않는 타입 간의 연산을 가능하게 하기 위해 사용됩니다. 캐스팅에는 암시적(implicit) 캐스팅과 명시적(explicit) 캐스팅, 두 가지 방법이 있습니다.",
  "unit3_lesson4_paragraph2": "암시적 캐스팅은 언어가 자동으로 수행하는 것으로, 더 폭넓고 정확도가 낮은 데이터 타입에서 더 정밀한 데이터 타입으로 바뀔 때 일어납니다. 예를 들어, 아래 예시에서 처음에는 정수(integer) 타입이던 값이, 정수에 실수(float) 값을 더하면 암시적으로 실수(float) 값으로 변환되는 경우가 이에 해당합니다.",
  "unit3_lesson4_paragraph3": "명시적 캐스팅은 프로그래머가 직접 지정하는 타입 변환입니다. int(), float(), str() 같은 내장 타입 변환 함수를 사용해 이루어집니다. 예를 들어, 아래 예시에서 x의 타입이 문자열이지만 이를 명시적으로 정수(integer)로 변환하는 상황을 들 수 있습니다.",
  "unit3_lesson4_paragraph4": "몇몇 연산자들이 제대로 동작하기 위해서는 타입 캐스팅이 반드시 필요하지만, 캐스팅은 때로 데이터 손실을 초래하기도 합니다. 예를 들어 실수(float) 타입을 정수(integer) 타입으로 변환하면 소수점 이하의 값은 단순히 잘려나갑니다.",

  "unit4_lesson1_title": "1. What are operators?",
  "unit4_lesson1_info": "2 min read · 0 questions",
  "unit4_lesson1_paragraph1": "연산자(operators)는 연산자의 양옆에 있는 데이터를 어떻게 다룰지 컴퓨터에게 지시하는 기호입니다. 수학 시간에 자주 사용하므로, 이미 익숙하실 거예요. 예를 들어, 5 + 3에서 ‘+’는 연산자이고, 5와 3은 피연산자(operands)입니다. 익숙하게 들리시나요?",
  "unit4_lesson1_paragraph2": "파이썬(그리고 대부분의 프로그래밍 언어)에서는 거의 모든 작업을 위한 연산자가 마련되어 있습니다. 하지만 이 단원에서는 기본 사항만 다루므로, 산술 연산자(arithmetic), 관계 연산자(relational), 논리 연산자(logical) 이 세 가지 주요 그룹에 집중해볼 거예요. 걱정하지 마세요! 파이썬은 직관적인 문법을 가지고 있으며, 모든 코드 줄은 여러분이 이해할 수 있는 일종의 의사 코드(pseudo code)로 변환될 수 있습니다.",

  "unit4_lesson2_title": "2. Arithmetic and Assignment Operators",
  "unit4_lesson2_info": "3 min read · 0 questions",
  "unit4_lesson2_paragraph1": "산술 연산자(arithmetic operators)는 우리가 가장 익숙하게 접하는 연산자이며, 가장 기본적인 연산을 수행하기 때문에 가장 자주 사용됩니다. 흔히 사용되는 산술 연산자로는 덧셈, 뺄셈, 곱셈, 나눗셈, 나머지 연산, 거듭제곱, 그리고 몫 연산이 있습니다.",
  "unit4_lesson2_paragraph2": "프로그래밍에서는 같은 변수 이름을 매번 다시 써야 하는 일이 귀찮아지기 마련입니다. 그래서 파이썬에서는 일부 산술 연산을 축약해 사용할 수 있어, 코드의 가독성을 높이고 작성도 더 편하게 해줍니다. 이러한 연산자를 할당 연산자(assignment operators) 라고 하며, 등호(=) 앞에 연산자를 붙여서 만듭니다.",

  "unit4_lesson3_title": "3. Relational and Logical Operators",
  "unit4_lesson3_info": "3 min read · 0 questions",
  "unit4_lesson3_paragraph1": "관계 연산자(relational operators)는 미래에 조건문을 작성할 때 특히 자주 사용됩니다. 기억나시나요? 초등학교 때 두 수를 비교하기 위해 “크다(greater than)”, “작다(less than)”라는 표현을 사용하셨죠? 관계 연산자는 두 값을 비교하고, 그 결과로 True 또는 False라는 불리언 값을 반환합니다.",
  "unit4_lesson3_paragraph2": "논리 연산자(logical operators)는 낯설게 느껴질 수도 있지만, 집합 이론(set theory)에 대해 학습한 적이 있다면 쉽게 이해할 수 있습니다. 설령 그렇지 않더라도, 파이썬의 개념과 문법이 직관적이므로 사용 방법을 익히는 데 큰 어려움이 없을 거예요. 논리 연산자는 불리언 값을 결합하거나 뒤집는 데 사용됩니다.",

  "unit4_lesson4_title": "4. Operator Precedence and Parentheses",
  "unit4_lesson4_info": "2 min read · 1 question",
  "unit4_lesson4_paragraph1": "수학에서와 마찬가지로, 프로그래밍에서도 연산자에는 우선순위(precedence) 가 있어 식을 계산할 때 어떤 순서로 연산자를 평가할지 결정하게 됩니다. 파이썬을 비롯한 대부분의 프로그래밍 언어에서의 연산자 우선순위는 수학에서 말하는 PEMDAS 규칙과 유사합니다. 즉, 괄호가 가장 높은 우선순위를 지니고, 그 뒤를 거듭제곱, 곱셈/나눗셈, 덧셈/뺄셈 순으로 평가합니다. 한 가지 다른 점은, 파이썬에서는 산술 연산자가 아닌 경우에도 이러한 우선순위가 적용된다는 것입니다.",
  "unit4_lesson4_question1": "질문 (A/B): 이 식의 결과값은 무엇일까요? result = 3 + 5 * 2 ** 2 > 15 and not (10 - 3 < 5)",
  "unit4_lesson4_question1_option1": "A. True",
  "unit4_lesson4_question1_option2": "B. False",
  "unit4_lesson4_question1_answer": "잘했어요!",
  "unit4_lesson4_question1_wrong_answer": "꽤 어려웠죠? 정답은 A. True입니다. 헷갈린다면 우선순위 표를 다시 확인해보세요!",

  "unit5_lesson1_title": "1. What are Conditional Statements?",
  "unit5_lesson1_info": "2 min read · 0 questions",
  "unit5_lesson1_paragraph1": "조건문은 프로그램이 의사결정을 하고 코드를 선별적으로 실행하도록 해주는 문장입니다. 실제로 질문을 던지는 방식과 비슷하죠. “만약 어떤 것이 참이면 이것을 하고, 그렇지 않으면 저것을 한다”라는 로직에 느슨하게 기반을 두고 있습니다. 개인적으로는 “질문에 대한 답이 ‘예’라면 이걸 하고, 그렇지 않다면 저걸 해라”라고 생각하면 이해하기 편하더라고요.",
  "unit5_lesson1_paragraph2": "조건문을 작성하는 가장 대표적인 방법은 if, elif, else 문을 사용하는 것입니다. if 문은 조건이 True일 때(질문에 대한 답이 ‘예’일 때)만 코드를 실행합니다. elif(else + if) 문은, 만약 첫 번째 조건이 False이면서 동시에 다른 조건을 확인해야 하거나, 첫 번째 질문의 답이 ‘아니요’이지만 후속 질문이 있을 때 사용합니다. else 문은 조건이 False일 때(질문에 대한 답이 ‘아니요’일 때) 실행되는 대체 코드를 의미합니다.",

  "unit5_lesson2_title": "2. What are Loops?",
  "unit5_lesson2_info": "1 min read · 0 questions",
  "unit5_lesson2_paragraph1": "루프는 컴퓨터가 코드 블록을 여러 번 반복해서 실행하도록 지시하는 문장입니다. 보통은 정해진 횟수만큼 실행되며, 각 실행을 ‘이터레이션(iteration)’이라고 부릅니다. 파이썬에서 루프를 만드는 주요 방식 두 가지는 for 루프와 while 루프입니다.",
  "unit5_lesson2_paragraph2": "for 루프는 정해진 횟수만큼 반복하는 루프로, 특정 범위(range)나 시퀀스를 “for (동안)” 반복한다고 이해할 수 있습니다.",
  "unit5_lesson2_paragraph3": "while 루프는 반복 횟수가 정해져 있지 않은 루프로, 특정 조건이 True인 동안(while) 계속해서 코드를 실행하다가 조건이 False가 되면 루프가 종료됩니다."
}
